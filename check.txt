üîç Running pre-commit hooks (checks only)...
check for added large files..............................................[42mPassed[m
fix end of files.........................................................[42mPassed[m
trim trailing whitespace.................................................[42mPassed[m
check yaml...............................................................[42mPassed[m
flake8...................................................................[42mPassed[m
isort....................................................................[42mPassed[m
black....................................................................[42mPassed[m
bandit...................................................................[41mFailed[m
[2m- hook id: bandit[m
[2m- exit code: 1[m

[main]	INFO	profile include tests: None
[main]	INFO	profile exclude tests: None
[main]	INFO	cli include tests: None
[main]	INFO	cli exclude tests: None
[main]	INFO	running on Python 3.12.3
[manager]	WARNING	Test in comment: subprocess is not a test name or id, ignoring
[manager]	WARNING	Test in comment: is is not a test name or id, ignoring
[manager]	WARNING	Test in comment: explicitly is not a test name or id, ignoring
[manager]	WARNING	Test in comment: controlled is not a test name or id, ignoring
[manager]	WARNING	Test in comment: input is not a test name or id, ignoring
[manager]	WARNING	Test in comment: validated is not a test name or id, ignoring
[manager]	WARNING	Test in comment: above is not a test name or id, ignoring
[tester]	WARNING	nosec encountered (B603), but no failed test on line 98
[manager]	WARNING	Test in comment: subprocess is not a test name or id, ignoring
[manager]	WARNING	Test in comment: is is not a test name or id, ignoring
[manager]	WARNING	Test in comment: explicitly is not a test name or id, ignoring
[manager]	WARNING	Test in comment: controlled is not a test name or id, ignoring
[manager]	WARNING	Test in comment: input is not a test name or id, ignoring
[manager]	WARNING	Test in comment: validated is not a test name or id, ignoring
[manager]	WARNING	Test in comment: above is not a test name or id, ignoring
[tester]	WARNING	nosec encountered (B603), but no failed test on line 98
[95mRun started:2025-03-22 00:43:03.018496[0m
[95m
Test results:[0m
[91m>> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
   Severity: High   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/0.0.0/plugins/b602_subprocess_popen_with_shell_equals_true.html
   Location: ./src/darca_executor/executor.py:106:21[0m
105	                text=True,
106	                shell=self.use_shell,
107	            )
108	            logger.debug(
109	                "Command completed with return code %d", result.returncode
110	            )
111	            if capture_output:
112	                logger.debug("STDOUT: %s", result.stdout.strip())
113	                logger.debug("STDERR: %s", result.stderr.strip())
114	            return result
115	
116	        except subprocess.CalledProcessError as e:

--------------------------------------------------
[91m>> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
   Severity: High   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/0.0.0/plugins/b602_subprocess_popen_with_shell_equals_true.html
   Location: src/darca_executor/executor.py:106:21[0m
105	                text=True,
106	                shell=self.use_shell,
107	            )
108	            logger.debug(
109	                "Command completed with return code %d", result.returncode
110	            )
111	            if capture_output:
112	                logger.debug("STDOUT: %s", result.stdout.strip())
113	                logger.debug("STDERR: %s", result.stderr.strip())
114	            return result
115	
116	        except subprocess.CalledProcessError as e:

--------------------------------------------------
[95m
Code scanned:[0m
	Total lines of code: 298
	Total lines skipped (#nosec): 0
[95m
Run metrics:[0m
	Total issues (by severity):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 2
	Total issues (by confidence):
		Undefined: 0
		Low: 0
		Medium: 0
		High: 2
[95mFiles skipped (0):[0m

pre-commit hook(s) made changes.
If you are seeing this message in CI, reproduce locally with: `pre-commit run --all-files`.
To run `pre-commit` as part of git workflow, use `pre-commit install`.
All changes made by hooks:
[1mdiff --git a/.github/workflows/cd.yml b/.github/workflows/cd.yml[m
[1mindex aa2e7d4..1c0d28d 100644[m
[1m--- a/.github/workflows/cd.yml[m
[1m+++ b/.github/workflows/cd.yml[m
[36m@@ -25,7 +25,7 @@[m [mjobs:[m
         run: poetry config virtualenvs.in-project true[m
 [m
       - name: Install Dependencies[m
[31m-        run: poetry install --no-dev[m
[32m+[m[32m        run: poetry install[m
 [m
       - name: Build Package[m
         run: poetry build[m
[1mdiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml[m
[1mindex 64aeb02..8535d2e 100644[m
[1m--- a/.pre-commit-config.yaml[m
[1m+++ b/.pre-commit-config.yaml[m
[36m@@ -4,9 +4,9 @@[m [mrepos:[m
   hooks:[m
   - id: check-added-large-files[m
   - id: end-of-file-fixer[m
[31m-    files: 'src/darca_exception/'[m
[32m+[m[32m    files: 'src/darca_executor/'[m
   - id: trailing-whitespace[m
[31m-    files: 'src/darca_exception/'[m
[32m+[m[32m    files: 'src/darca_executor/'[m
   - id: check-yaml[m
     files: '.github/'[m
 [m
[36m@@ -33,6 +33,6 @@[m [mrepos:[m
   rev: '1.8.3'[m
   hooks:[m
   - id: bandit[m
[31m-    args: ["-r", "src/darca_exception/"][m
[32m+[m[32m    args: ["-r", "src/darca_executor/"][m
     exclude: tests[m
 [m
[1mdiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst[m
[1mindex 6d302a0..34fe537 100644[m
[1m--- a/CONTRIBUTING.rst[m
[1m+++ b/CONTRIBUTING.rst[m
[36m@@ -1,161 +1,81 @@[m
[31m-=======================================[m
[31m-Contributing to Darca Exception[m
[31m-=======================================[m
[32m+[m[32mContributing to Darca Executor[m
[32m+[m[32m==============================[m
 [m
[31m-Thank you for considering contributing to **Darca Exception**!  [m
[31m-Contributions help make this project better, and we welcome **bug reports, feature requests, and pull requests**.  [m
[32m+[m[32mFirst off, thank you for considering contributing to **Darca Executor**.[m[41m  [m
[32m+[m[32mYour ideas, suggestions, code, and feedback are what make this project better.[m
 [m
 ---[m
 [m
[31m-üöÄ **How to Contribute**[m
[31m---------------------[m
[31m-We welcome contributions in the following ways:[m
[31m-[m
[31m-- **Report Bugs** ‚Äì If you find an issue, please report it under `Issues`.[m
[31m-- **Request Features** ‚Äì Have a great idea? Open a feature request![m
[31m-- **Submit Pull Requests** ‚Äì Help improve the project by fixing bugs or adding enhancements.[m
[31m-[m
[31m----[m
[31m-[m
[31m-üîç **Reporting Bugs**[m
[31m---------------------[m
[31m-If you find a bug, please check the `Issues` tab to see if it has already been reported.  [m
[31m-If not, create a new issue with the following details:[m
[31m-[m
[31m-1. **Describe the bug** ‚Äì What is happening?[m
[31m-2. **Steps to reproduce** ‚Äì How can we reproduce the bug?[m
[31m-3. **Expected behavior** ‚Äì What should happen instead?[m
[31m-4. **Screenshots or logs (if applicable)** ‚Äì Helps us understand the issue better.[m
[31m-5. **Environment details** ‚Äì Python version, OS, etc.[m
[31m-[m
[31m-üìå **Submit your bug report here:**  [m
[31m-`https://github.com/roelkist/darca-exception/issues`[m
[31m-[m
[31m----[m
[31m-[m
[31m-üí° **Requesting Features**[m
[31m---------------------[m
[31m-Have an idea to improve the project? Submit a **Feature Request** with:[m
[31m-[m
[31m-1. **Feature description** ‚Äì Explain your idea clearly.[m
[31m-2. **Use case** ‚Äì How would this help users?[m
[31m-3. **Potential implementation** (if possible) ‚Äì Any thoughts on how to add it?[m
[31m-[m
[31m-üìå **Submit your feature request here:**  [m
[31m-`https://github.com/roelkist/darca-exception/issues`[m
[31m-[m
[31m----[m
[31m-[m
[31m-üõ† **Submitting a Pull Request (PR)**[m
[31m---------------------[m
[31m-### **1. Fork & Clone**[m
[31m-First, clone the repository:[m
[31m-[m
[31m-.. code-block:: bash[m
[31m-[m
[31m-    git clone https://github.com/roelkist/darca-exception.git[m
[31m-    cd darca-exception[m
[31m-[m
[31m-### **2. Create a New Branch**[m
[31m-Always create a new branch for your contribution:[m
[32m+[m[32mGetting Started[m
[32m+[m[32m---------------[m
 [m
[31m-.. code-block:: bash[m
[31m-[m
[31m-    git checkout -b feature/new-exception-handler[m
[31m-[m
[31m-### **3. Install Dependencies**[m
[31m-Set up your environment:[m
[32m+[m[32mTo get started with local development:[m
 [m
 .. code-block:: bash[m
 [m
     make install[m
 [m
[31m-### **4. Make Your Changes**[m
[31m-- Follow the project‚Äôs coding style.[m
[31m-- Ensure your code is **well-documented** and **tested**.[m
[31m-[m
[31m-### **5. Run Pre-Commit & Tests**[m
[31m-Before submitting, ensure everything is correctly formatted and tested:[m
[31m-[m
[31m-.. code-block:: bash[m
[31m-[m
[31m-    make check  # Formats, runs pre-commit, and tests[m
[31m-[m
[31m-### **6. Commit and Push**[m
[31m-Commit your changes with a meaningful message:[m
[31m-[m
[31m-.. code-block:: bash[m
[31m-[m
[31m-    git add .[m
[31m-    git commit -m "Add new exception type for better error handling"[m
[31m-    git push origin feature/new-exception-handler[m
[31m-[m
[31m-### **7. Open a Pull Request**[m
[31m-- Go to the repository on GitHub.[m
[31m-- Click "New Pull Request".[m
[31m-- Select your branch and submit the PR.[m
[31m-[m
[31m-**PR Guidelines:**[m
[31m-- **Reference the related issue (if applicable).**[m
[31m-- **Explain what your PR does and why it's needed.**[m
[31m-- **Include test results/screenshots if relevant.**[m
[32m+[m[32mThis sets up a Poetry environment in `/tmp/darca-executor-venv` and installs all dependencies.[m
 [m
 ---[m
 [m
[31m-‚úÖ **Code Guidelines**[m
[32m+[m[32mPre-Commit Checklist[m
 --------------------[m
[31m-To maintain code consistency, follow these guidelines:[m
 [m
[31m-1. **Formatting** ‚Äì Code should be formatted using `black` and `isort`:[m
[31m-   [m
[31m-   .. code-block:: bash[m
[32m+[m[32mBefore pushing your code or opening a Pull Request, run the following:[m
 [m
[31m-       make format[m
[32m+[m[32m.. code-block:: bash[m
 [m
[31m-2. **Linting & Static Analysis** ‚Äì Run `pre-commit` before pushing:[m
[32m+[m[32m    make check[m
 [m
[31m-   .. code-block:: bash[m
[32m+[m[32mThis will:[m
 [m
[31m-       make precommit[m
[32m+[m[32m- Auto-format your code (via Black + isort)[m
[32m+[m[32m- Run pre-commit hooks (linting, checks)[m
[32m+[m[32m- Run the full test suite with coverage[m
[32m+[m[32m- Build the documentation to ensure it's error-free[m
 [m
[31m-3. **Testing** ‚Äì Ensure all tests pass:[m
[32m+[m[32m---[m
 [m
[31m-   .. code-block:: bash[m
[32m+[m[32mHow to Contribute[m
[32m+[m[32m-----------------[m
 [m
[31m-       make test[m
[32m+[m[32mWe welcome:[m
 [m
[31m-4. **Keep Changes Focused** ‚Äì PRs should be **small and focused** on one feature or bug fix.[m
[32m+[m[32m- üêû **Bug Reports** ‚Äî Submit an issue with a clear reproduction.[m
[32m+[m[32m- üí° **Feature Requests** ‚Äî Have a cool idea? Open an issue and describe it.[m
[32m+[m[32m- üõ†  **Pull Requests** ‚Äî Fix a bug, improve tests, or add functionality.[m
 [m
 ---[m
 [m
[31m-üìñ **Documentation Contributions**[m
[31m---------------------[m
[31m-If you're improving documentation:[m
[32m+[m[32mPull Request Guidelines[m
[32m+[m[32m-----------------------[m
 [m
[31m-- Edit the RST files in `docs/source/`.[m
[31m-- Run:[m
[32m+[m[32m1. Fork the repository[m
[32m+[m[32m2. Create a new branch: `git checkout -b feat/your-feature-name`[m
[32m+[m[32m3. Make your changes[m
[32m+[m[32m4. Ensure `make check` passes[m
[32m+[m[32m5. Push to your fork and submit a Pull Request[m
 [m
[31m-  .. code-block:: bash[m
[32m+[m[32m---[m
 [m
[31m-      make docs[m
[32m+[m[32mBest Practices[m
[32m+[m[32m--------------[m
 [m
[31m-- Open a PR with your improvements![m
[32m+[m[32m- Keep your code Pythonic and consistent with existing patterns.[m
[32m+[m[32m- Use `DarcaExecutor` and `DarcaExecError` consistently for command execution and error handling.[m
[32m+[m[32m- Add or update tests for any new functionality.[m
[32m+[m[32m- Keep docstrings and logging clear and helpful.[m
 [m
 ---[m
 [m
[31m-üóë **Cleaning Up**[m
[31m---------------------[m
[31m-To remove virtual environments and reset dependencies:[m
[32m+[m[32mCommunication[m
[32m+[m[32m-------------[m
 [m
[31m-.. code-block:: bash[m
[32m+[m[32mWe encourage open communication via GitHub Issues and Pull Requests.[m
 [m
[31m-    make clean[m
[32m+[m[32mWhether it's a suggestion, bug, or a "hey this is cool" ‚Äî we want to hear from you![m
 [m
 ---[m
 [m
[31m-üéâ **Thank You!**[m
[31m---------------------[m
[31m-Your contributions make **Darca Exception** better for everyone! üöÄ  [m
[31m-Feel free to ask questions or discuss improvements in the **Issues** section.[m
[31m-[m
[31m----[m
[32m+[m[32mThank you again for helping make Darca Executor awesome! üöÄ[m
[1mdiff --git a/Makefile b/Makefile[m
[1mindex 1ad6bae..ce636b8 100644[m
[1m--- a/Makefile[m
[1m+++ b/Makefile[m
[36m@@ -5,7 +5,7 @@[m [mSHELL := /bin/bash  # Ensure Bash is used[m
 .PHONY: all install add-deps format test precommit docs check ci clean venv poetry[m
 [m
 # Store virtual environment and Poetry cache outside of NFS[m
[31m-VENV_PATH := /tmp/darca-exception-venv[m
[32m+[m[32mVENV_PATH := /tmp/darca-executor-venv[m
 POETRY_HOME := /tmp/poetry-cache[m
 POETRY_CONFIG_DIR := /tmp/poetry-config[m
 PYTHONPYCACHEPREFIX := /tmp/pycache[m
[1mdiff --git a/README.rst b/README.rst[m
[1mindex 83cb660..eb8799b 100644[m
[1m--- a/README.rst[m
[1m+++ b/README.rst[m
[36m@@ -1,186 +1,137 @@[m
[31m-=============================================[m
[31m-Darca Exception - Advanced Exception Handling[m
[31m-=============================================[m
[31m-[m
[31m-Darca Exception is a powerful and feature-rich Python exception base class designed to enhance error handling in your projects. [m
[31m-It integrates seamlessly with `darca-log-facility` for structured logging, making debugging and error tracking effortless.[m
[31m-[m
[31m-üöÄ **Key Features**[m
[31m---------------------[m
[31m-- **Generic & Reusable** - Works across various projects without modification.[m
[31m-- **Structured Logging** - Uses `DarcaLogger` for clean and consistent logs.[m
[31m-- **Exception Chaining** - Captures underlying causes (`cause`).[m
[31m-- **Metadata Support** - Add extra details (`metadata`).[m
[31m-- **JSON Serialization** - Easily convert exceptions to structured JSON.[m
[31m-- **100% Test Coverage** - Ensured via `pytest` and `pytest-cov`.[m
[32m+[m[32mDarca Executor[m
[32m+[m[32m==============[m
 [m
[31m----[m
[32m+[m[32m**Darca Executor** is a Python module designed for secure and structured command execution.[m[41m  [m
[32m+[m[32mIt integrates tightly with the `darca-log-facility` and `darca-exception` ecosystem, ensuring consistent logging, structured error reporting, and clean extensibility.[m
 [m
[31m-üì¶ **Installation**[m
[31m---------------------[m
[31m-Darca Exception uses `Poetry` for dependency management. To install dependencies, use:[m
[32m+[m[32m.. image:: coverage.svg[m
[32m+[m[32m   :target: coverage.svg[m
[32m+[m[32m   :alt: Test coverage badge[m
 [m
[31m-.. code-block:: bash[m
[32m+[m[32m---[m
 [m
[31m-    make install[m
[32m+[m[32mFeatures[m
[32m+[m[32m--------[m
 [m
[31m-This will:[m
[31m-- Create a virtual environment (`venv`) if needed.[m
[31m-- Install `Poetry` and project dependencies.[m
[32m+[m[32m- üõ†  Execute system commands with subprocess safely and consistently.[m
[32m+[m[32m- üßæ  Structured error handling via `DarcaExecError` (based on `DarcaException`)[m
[32m+[m[32m- üìú  Rich logging integration with `DarcaLogger`[m
[32m+[m[32m- üß™  Pytest-based test suite with coverage and formatting checks[m
[32m+[m[32m- üìö  Sphinx-ready documentation setup[m
[32m+[m[32m- üß∞  Built-in Makefile for all major development workflows[m
 [m
 ---[m
 [m
[31m-üöÄ **Usage**[m
[31m---------------------[m
[31m-### **Raising an Exception**[m
[31m-You can raise an exception using `DarcaException`:[m
[31m-[m
[31m-.. code-block:: python[m
[32m+[m[32mInstallation[m
[32m+[m[32m------------[m
 [m
[31m-    from darca_exception import DarcaException[m
[32m+[m[32mTo get started with local development:[m
 [m
[31m-    raise DarcaException("Something went wrong", error_code="GENERIC_ERROR")[m
[31m-[m
[31m-### **Exception Chaining**[m
[31m-You can chain exceptions using `cause`:[m
[32m+[m[32m.. code-block:: bash[m
 [m
[31m-.. code-block:: python[m
[32m+[m[32m    make install[m
 [m
[31m-    try:[m
[31m-        1 / 0[m
[31m-    except ZeroDivisionError as e:[m
[31m-        raise DarcaException("Math error", error_code="MATH_001", cause=e)[m
[32m+[m[32mThis installs all dependencies into a self-contained virtual environment in `/tmp/darca-executor-venv`.[m
 [m
[31m-### **Structured JSON Output**[m
[31m-Converting an exception to JSON is simple:[m
[32m+[m[32mTo install additional packages:[m
 [m
[31m-.. code-block:: python[m
[32m+[m[32m.. code-block:: bash[m
 [m
[31m-    try:[m
[31m-        raise DarcaException("Database failure", error_code="DB_FAIL")[m
[31m-    except DarcaException as e:[m
[31m-        print(e.to_dict())[m
[32m+[m[32m    make add-deps group=dev deps="some-package"[m
[32m+[m[32m    make add-prod-deps deps="some-runtime-package"[m
 [m
 ---[m
 [m
[31m-üõ† **Development & Testing**[m
[31m-----------------------------[m
[31m-### **Running Tests**[m
[31m-To run the test suite and check coverage:[m
[32m+[m[32mUsage[m
[32m+[m[32m-----[m
 [m
[31m-.. code-block:: bash[m
[32m+[m[32mExample usage of the executor:[m
 [m
[31m-    make test[m
[32m+[m[32m.. code-block:: python[m
 [m
[31m-This will:[m
[31m-- Run `pytest` with coverage enabled.[m
[31m-- Generate a test coverage report.[m
[32m+[m[32m    from darca_executor import DarcaExecutor, DarcaExecError[m
 [m
[31m-### **Formatting & Linting**[m
[31m-To automatically format and check code consistency:[m
[32m+[m[32m    executor = DarcaExecutor(use_shell=True)[m
 [m
[31m-.. code-block:: bash[m
[32m+[m[32m    try:[m
[32m+[m[32m        result = executor.run("echo Hello, Darca!")[m
[32m+[m[32m        print(result.stdout)[m
[32m+[m[32m    except DarcaExecError as e:[m
[32m+[m[32m        print(f"Command failed: {e}")[m
 [m
[31m-    make format[m
[32m+[m[32m---[m
 [m
[31m-### **Checking Before Pushing**[m
[31m-Before pushing code, always run:[m
[32m+[m[32mTesting & Quality[m
[32m+[m[32m-----------------[m
[32m+[m
[32m+[m[32mRun all checks (formatting, tests, coverage, precommit):[m
 [m
 .. code-block:: bash[m
 [m
     make check[m
 [m
[31m-This will:[m
[31m-- Format the code.[m
[31m-- Run pre-commit hooks.[m
[31m-- Execute tests.[m
[31m-[m
[31m----[m
[31m-[m
[31m-üìñ **Building Documentation**[m
[31m------------------------------[m
[31m-To generate documentation using Sphinx:[m
[32m+[m[32mRun tests with coverage output:[m
 [m
 .. code-block:: bash[m
 [m
[31m-    make docs[m
[31m-[m
[31m-This will:[m
[31m-- Build the documentation in `docs/build/html/`.[m
[31m-[m
[31m----[m
[32m+[m[32m    make test[m
 [m
[31m-üöÄ **Pre-Commit Hooks**[m
[31m------------------------[m
[31m-To run pre-commit checks before committing code:[m
[32m+[m[32mRun pre-commit hooks:[m
 [m
 .. code-block:: bash[m
 [m
     make precommit[m
 [m
[31m-This will:[m
[31m-- Run linting, formatting, and static analysis.[m
[31m-- Prevent common mistakes before pushing code.[m
[32m+[m[32mApply auto-formatting:[m
 [m
[31m----[m
[32m+[m[32m.. code-block:: bash[m
 [m
[31m-üîß **Adding Dependencies**[m
[31m---------------------------[m
[31m-You can dynamically add dependencies using `make`:[m
[32m+[m[32m    make format[m
 [m
[31m-- **Development dependencies** (`dev` group):[m
[32m+[m[32m---[m
 [m
[31m-  .. code-block:: bash[m
[32m+[m[32mDocumentation[m
[32m+[m[32m-------------[m
 [m
[31m-      make add-deps group=dev deps="pytest black isort"[m
[32m+[m[32mTo build the docs:[m
 [m
[31m-- **Production dependencies**:[m
[32m+[m[32m.. code-block:: bash[m
 [m
[31m-  .. code-block:: bash[m
[32m+[m[32m    make docs[m
 [m
[31m-      make add-prod-deps deps="requests pydantic"[m
[32m+[m[32mDocs will be available at: `docs/build/html/index.html`[m
 [m
 ---[m
 [m
[31m-üóë **Cleaning Up**[m
[31m------------------[m
[31m-To remove the virtual environment and reset dependencies:[m
[32m+[m[32mContinuous Integration[m
[32m+[m[32m----------------------[m
[32m+[m
[32m+[m[32mThe `make ci` command is used as the default entrypoint in GitHub Actions:[m
 [m
 .. code-block:: bash[m
 [m
[31m-    make clean[m
[32m+[m[32m    make ci[m
 [m
[31m-This will:[m
[31m-- Remove the Poetry environment.[m
[31m-- Delete cache files.[m
[32m+[m[32mThis will install dependencies, run precommit, test the codebase, and build the documentation.[m
 [m
 ---[m
 [m
[31m-üí° **Contributing**[m
[31m--------------------[m
[31m-Contributions are welcome! You can contribute by:[m
[31m-[m
[31m-- **Submitting feature requests**  [m
[31m-- **Reporting issues**  [m
[31m-- **Creating pull requests for fixes and enhancements**  [m
[32m+[m[32mContributing[m
[32m+[m[32m------------[m
 [m
[31m-Before submitting a pull request, make sure to:[m
[32m+[m[32mWe welcome your contributions![m
 [m
[31m-1. Run `make check` to ensure all checks pass.[m
[31m-2. Follow code style and formatting guidelines.[m
[32m+[m[32mPlease see `CONTRIBUTING.rst <CONTRIBUTING.rst>`_ for details on how to get involved.[m
 [m
[31m----[m
[32m+[m[32mYou can:[m
 [m
[31m-üìú **License**[m
[31m----------------[m
[31m-This project is licensed under the MIT License. See `LICENSE` for details.[m
[32m+[m[32m- üí° Open feature requests or ideas via GitHub Issues[m
[32m+[m[32m- üêõ Report bugs[m
[32m+[m[32m- üîß Submit Pull Requests for fixes, enhancements, or tests[m
 [m
 ---[m
 [m
[31m-üéâ **Final Notes**[m
[31m--------------------[m
[31m-This project is production-ready and **fully tested**. üöÄ  [m
[31m-If you find any issues, feel free to submit a bug report![m
[31m-[m
[31m----[m
[32m+[m[32mLicense[m
[32m+[m[32m-------[m
 [m
[32m+[m[32mThis project is maintained by the Darca collective. License details TBD.[m
[1mdiff --git a/docs/source/index.rst b/docs/source/index.rst[m
[1mindex 193a75a..2227f6c 100644[m
[1m--- a/docs/source/index.rst[m
[1m+++ b/docs/source/index.rst[m
[36m@@ -13,6 +13,9 @@[m [mDocumentation List[m
    :maxdepth: 4[m
    :caption: Contents:[m
 [m
[32m+[m[32m   usage[m
[32m+[m[32m   api[m
[32m+[m
 [m
 Indices and tables[m
 ==================[m
[1mdiff --git a/poetry.lock b/poetry.lock[m
[1mindex 5c4c267..943e114 100644[m
[1m--- a/poetry.lock[m
[1m+++ b/poetry.lock[m
[36m@@ -271,75 +271,75 @@[m [mdevelopment = ["black", "flake8", "mypy", "pytest", "types-colorama"][m
 [m
 [[package]][m
 name = "coverage"[m
[31m-version = "7.7.0"[m
[32m+[m[32mversion = "7.7.1"[m
 description = "Code coverage measurement for Python"[m
 optional = false[m
 python-versions = ">=3.9"[m
 groups = ["dev"][m
 files = [[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:a538a23119d1e2e2ce077e902d02ea3d8e0641786ef6e0faf11ce82324743944"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:1586ad158523f4133499a4f322b230e2cfef9cc724820dbd58595a5a236186f4"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7b6c96d69928a3a6767fab8dc1ce8a02cf0156836ccb1e820c7f45a423570d98"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7f18d47641282664276977c604b5a261e51fefc2980f5271d547d706b06a837f"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f2a1e18a85bd066c7c556d85277a7adf4651f259b2579113844835ba1a74aafd"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:70f0925c4e2bfc965369f417e7cc72538fd1ba91639cf1e4ef4b1a6b50439b3b"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:b0fac2088ec4aaeb5468b814bd3ff5e5978364bfbce5e567c44c9e2854469f6c"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:b3e212a894d8ae07fde2ca8b43d666a6d49bbbddb10da0f6a74ca7bd31f20054"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-win32.whl", hash = "sha256:f32b165bf6dfea0846a9c9c38b7e1d68f313956d60a15cde5d1709fddcaf3bee"},[m
[31m-    {file = "coverage-7.7.0-cp310-cp310-win_amd64.whl", hash = "sha256:a2454b12a3f12cc4698f3508912e6225ec63682e2ca5a96f80a2b93cef9e63f3"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:a0a207c87a9f743c8072d059b4711f8d13c456eb42dac778a7d2e5d4f3c253a7"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:2d673e3add00048215c2cc507f1228a7523fd8bf34f279ac98334c9b07bd2656"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f81fe93dc1b8e5673f33443c0786c14b77e36f1025973b85e07c70353e46882b"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d8c7524779003d59948c51b4fcbf1ca4e27c26a7d75984f63488f3625c328b9b"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4c124025430249118d018dcedc8b7426f39373527c845093132196f2a483b6dd"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:e7f559c36d5cdc448ee13e7e56ed7b6b5d44a40a511d584d388a0f5d940977ba"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:37cbc7b0d93dfd133e33c7ec01123fbb90401dce174c3b6661d8d36fb1e30608"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:7d2a65876274acf544703e943c010b60bd79404e3623a1e5d52b64a6e2728de5"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-win32.whl", hash = "sha256:f5a2f71d6a91238e7628f23538c26aa464d390cbdedf12ee2a7a0fb92a24482a"},[m
[31m-    {file = "coverage-7.7.0-cp311-cp311-win_amd64.whl", hash = "sha256:ae8006772c6b0fa53c33747913473e064985dac4d65f77fd2fdc6474e7cd54e4"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:056d3017ed67e7ddf266e6f57378ece543755a4c9231e997789ab3bd11392c94"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:33c1394d8407e2771547583b66a85d07ed441ff8fae5a4adb4237ad39ece60db"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4fbb7a0c3c21908520149d7751cf5b74eb9b38b54d62997b1e9b3ac19a8ee2fe"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:bb356e7ae7c2da13f404bf8f75be90f743c6df8d4607022e759f5d7d89fe83f8"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bce730d484038e97f27ea2dbe5d392ec5c2261f28c319a3bb266f6b213650135"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:aa4dff57fc21a575672176d5ab0ef15a927199e775c5e8a3d75162ab2b0c7705"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:b667b91f4f714b17af2a18e220015c941d1cf8b07c17f2160033dbe1e64149f0"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:693d921621a0c8043bfdc61f7d4df5ea6d22165fe8b807cac21eb80dd94e4bbd"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-win32.whl", hash = "sha256:52fc89602cde411a4196c8c6894afb384f2125f34c031774f82a4f2608c59d7d"},[m
[31m-    {file = "coverage-7.7.0-cp312-cp312-win_amd64.whl", hash = "sha256:0ce8cf59e09d31a4915ff4c3b94c6514af4c84b22c4cc8ad7c3c546a86150a92"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4545485fef7a8a2d8f30e6f79ce719eb154aab7e44217eb444c1d38239af2072"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:1393e5aa9441dafb0162c36c8506c648b89aea9565b31f6bfa351e66c11bcd82"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:316f29cc3392fa3912493ee4c83afa4a0e2db04ff69600711f8c03997c39baaa"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e1ffde1d6bc2a92f9c9207d1ad808550873748ac2d4d923c815b866baa343b3f"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:416e2a8845eaff288f97eaf76ab40367deafb9073ffc47bf2a583f26b05e5265"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:5efdeff5f353ed3352c04e6b318ab05c6ce9249c25ed3c2090c6e9cadda1e3b2"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:57f3bd0d29bf2bd9325c0ff9cc532a175110c4bf8f412c05b2405fd35745266d"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:3ab7090f04b12dc6469882ce81244572779d3a4b67eea1c96fb9ecc8c607ef39"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-win32.whl", hash = "sha256:180e3fc68ee4dc5af8b33b6ca4e3bb8aa1abe25eedcb958ba5cff7123071af68"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313-win_amd64.whl", hash = "sha256:55143aa13c49491f5606f05b49ed88663446dce3a4d3c5d77baa4e36a16d3573"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:cc41374d2f27d81d6558f8a24e5c114580ffefc197fd43eabd7058182f743322"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:89078312f06237417adda7c021c33f80f7a6d2db8572a5f6c330d89b080061ce"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5b2f144444879363ea8834cd7b6869d79ac796cb8f864b0cfdde50296cd95816"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:60e6347d1ed882b1159ffea172cb8466ee46c665af4ca397edbf10ff53e9ffaf"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:cb203c0afffaf1a8f5b9659a013f8f16a1b2cad3a80a8733ceedc968c0cf4c57"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:ad0edaa97cb983d9f2ff48cadddc3e1fb09f24aa558abeb4dc9a0dbacd12cbb4"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:c5f8a5364fc37b2f172c26a038bc7ec4885f429de4a05fc10fdcb53fb5834c5c"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:c4e09534037933bf6eb31d804e72c52ec23219b32c1730f9152feabbd7499463"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-win32.whl", hash = "sha256:1b336d06af14f8da5b1f391e8dec03634daf54dfcb4d1c4fb6d04c09d83cef90"},[m
[31m-    {file = "coverage-7.7.0-cp313-cp313t-win_amd64.whl", hash = "sha256:b54a1ee4c6f1905a436cbaa04b26626d27925a41cbc3a337e2d3ff7038187f07"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:1c8fbce80b2b8bf135d105aa8f5b36eae0c57d702a1cc3ebdea2a6f03f6cdde5"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:d9710521f07f526de30ccdead67e6b236fe996d214e1a7fba8b36e2ba2cd8261"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7789e700f33f2b133adae582c9f437523cd5db8de845774988a58c360fc88253"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:b8c36093aca722db73633cf2359026ed7782a239eb1c6db2abcff876012dc4cf"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:c075d167a6ec99b798c1fdf6e391a1d5a2d054caffe9593ba0f97e3df2c04f0e"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:d013c07061751ae81861cae6ec3a4fe04e84781b11fd4b6b4201590234b25c7b"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-musllinux_1_2_i686.whl", hash = "sha256:104bf640f408f4e115b85110047c7f27377e1a8b7ba86f7db4fa47aa49dc9a8e"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:39abcacd1ed54e2c33c54bdc488b310e8ef6705833f7148b6eb9a547199d375d"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-win32.whl", hash = "sha256:8e336b56301774ace6be0017ff85c3566c556d938359b61b840796a0202f805c"},[m
[31m-    {file = "coverage-7.7.0-cp39-cp39-win_amd64.whl", hash = "sha256:8c938c6ae59be67ac19a7204e079efc94b38222cd7d0269f96e45e18cddeaa59"},[m
[31m-    {file = "coverage-7.7.0-pp39.pp310.pp311-none-any.whl", hash = "sha256:3b0e6e54591ae0d7427def8a4d40fca99df6b899d10354bab73cd5609807261c"},[m
[31m-    {file = "coverage-7.7.0-py3-none-any.whl", hash = "sha256:708f0a1105ef2b11c79ed54ed31f17e6325ac936501fc373f24be3e6a578146a"},[m
[31m-    {file = "coverage-7.7.0.tar.gz", hash = "sha256:cd879d4646055a573775a1cec863d00c9ff8c55860f8b17f6d8eee9140c06166"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:553ba93f8e3c70e1b0031e4dfea36aba4e2b51fe5770db35e99af8dc5c5a9dfe"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:44683f2556a56c9a6e673b583763096b8efbd2df022b02995609cf8e64fc8ae0"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:02fad4f8faa4153db76f9246bc95c1d99f054f4e0a884175bff9155cf4f856cb"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4c181ceba2e6808ede1e964f7bdc77bd8c7eb62f202c63a48cc541e5ffffccb6"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80b5b207a8b08c6a934b214e364cab2fa82663d4af18981a6c0a9e95f8df7602"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:25fe40967717bad0ce628a0223f08a10d54c9d739e88c9cbb0f77b5959367542"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:881cae0f9cbd928c9c001487bb3dcbfd0b0af3ef53ae92180878591053be0cb3"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:c90e9141e9221dd6fbc16a2727a5703c19443a8d9bf7d634c792fa0287cee1ab"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-win32.whl", hash = "sha256:ae13ed5bf5542d7d4a0a42ff5160e07e84adc44eda65ddaa635c484ff8e55917"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp310-cp310-win_amd64.whl", hash = "sha256:171e9977c6a5d2b2be9efc7df1126fd525ce7cad0eb9904fe692da007ba90d81"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:1165490be0069e34e4f99d08e9c5209c463de11b471709dfae31e2a98cbd49fd"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:44af11c00fd3b19b8809487630f8a0039130d32363239dfd15238e6d37e41a48"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:fbba59022e7c20124d2f520842b75904c7b9f16c854233fa46575c69949fb5b9"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:af94fb80e4f159f4d93fb411800448ad87b6039b0500849a403b73a0d36bb5ae"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:eae79f8e3501133aa0e220bbc29573910d096795882a70e6f6e6637b09522133"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:e33426a5e1dc7743dd54dfd11d3a6c02c5d127abfaa2edd80a6e352b58347d1a"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:b559adc22486937786731dac69e57296cb9aede7e2687dfc0d2696dbd3b1eb6b"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:b838a91e84e1773c3436f6cc6996e000ed3ca5721799e7789be18830fad009a2"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-win32.whl", hash = "sha256:2c492401bdb3a85824669d6a03f57b3dfadef0941b8541f035f83bbfc39d4282"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp311-cp311-win_amd64.whl", hash = "sha256:1e6f867379fd033a0eeabb1be0cffa2bd660582b8b0c9478895c509d875a9d9e"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:eff187177d8016ff6addf789dcc421c3db0d014e4946c1cc3fbf697f7852459d"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:2444fbe1ba1889e0b29eb4d11931afa88f92dc507b7248f45be372775b3cef4f"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:177d837339883c541f8524683e227adcaea581eca6bb33823a2a1fdae4c988e1"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:15d54ecef1582b1d3ec6049b20d3c1a07d5e7f85335d8a3b617c9960b4f807e0"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:75c82b27c56478d5e1391f2e7b2e7f588d093157fa40d53fd9453a471b1191f2"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:315ff74b585110ac3b7ab631e89e769d294f303c6d21302a816b3554ed4c81af"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:4dd532dac197d68c478480edde74fd4476c6823355987fd31d01ad9aa1e5fb59"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:385618003e3d608001676bb35dc67ae3ad44c75c0395d8de5780af7bb35be6b2"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-win32.whl", hash = "sha256:63306486fcb5a827449464f6211d2991f01dfa2965976018c9bab9d5e45a35c8"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp312-cp312-win_amd64.whl", hash = "sha256:37351dc8123c154fa05b7579fdb126b9f8b1cf42fd6f79ddf19121b7bdd4aa04"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:eebd927b86761a7068a06d3699fd6c20129becf15bb44282db085921ea0f1585"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:2a79c4a09765d18311c35975ad2eb1ac613c0401afdd9cb1ca4110aeb5dd3c4c"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:8b1c65a739447c5ddce5b96c0a388fd82e4bbdff7251396a70182b1d83631019"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:392cc8fd2b1b010ca36840735e2a526fcbd76795a5d44006065e79868cc76ccf"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9bb47cc9f07a59a451361a850cb06d20633e77a9118d05fd0f77b1864439461b"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:b4c144c129343416a49378e05c9451c34aae5ccf00221e4fa4f487db0816ee2f"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:bc96441c9d9ca12a790b5ae17d2fa6654da4b3962ea15e0eabb1b1caed094777"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:3d03287eb03186256999539d98818c425c33546ab4901028c8fa933b62c35c3a"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-win32.whl", hash = "sha256:8fed429c26b99641dc1f3a79179860122b22745dd9af36f29b141e178925070a"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313-win_amd64.whl", hash = "sha256:092b134129a8bb940c08b2d9ceb4459af5fb3faea77888af63182e17d89e1cf1"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:d3154b369141c3169b8133973ac00f63fcf8d6dbcc297d788d36afbb7811e511"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:264ff2bcce27a7f455b64ac0dfe097680b65d9a1a293ef902675fa8158d20b24"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ba8480ebe401c2f094d10a8c4209b800a9b77215b6c796d16b6ecdf665048950"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:520af84febb6bb54453e7fbb730afa58c7178fd018c398a8fcd8e269a79bf96d"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:88d96127ae01ff571d465d4b0be25c123789cef88ba0879194d673fdea52f54e"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:0ce92c5a9d7007d838456f4b77ea159cb628187a137e1895331e530973dcf862"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:0dab4ef76d7b14f432057fdb7a0477e8bffca0ad39ace308be6e74864e632271"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:7e688010581dbac9cab72800e9076e16f7cccd0d89af5785b70daa11174e94de"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-win32.whl", hash = "sha256:e52eb31ae3afacdacfe50705a15b75ded67935770c460d88c215a9c0c40d0e9c"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp313-cp313t-win_amd64.whl", hash = "sha256:a6b6b3bd121ee2ec4bd35039319f3423d0be282b9752a5ae9f18724bc93ebe7c"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:34a3bf6b92e6621fc4dcdaab353e173ccb0ca9e4bfbcf7e49a0134c86c9cd303"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:d6874929d624d3a670f676efafbbc747f519a6121b581dd41d012109e70a5ebd"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7ba5ff236c87a7b7aa1441a216caf44baee14cbfbd2256d306f926d16b026578"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:452735fafe8ff5918236d5fe1feac322b359e57692269c75151f9b4ee4b7e1bc"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f5f99a93cecf799738e211f9746dc83749b5693538fbfac279a61682ba309387"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:11dd6f52c2a7ce8bf0a5f3b6e4a8eb60e157ffedc3c4b4314a41c1dfbd26ce58"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-musllinux_1_2_i686.whl", hash = "sha256:b52edb940d087e2a96e73c1523284a2e94a4e66fa2ea1e2e64dddc67173bad94"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:d2e73e2ac468536197e6b3ab79bc4a5c9da0f078cd78cfcc7fe27cf5d1195ef0"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-win32.whl", hash = "sha256:18f544356bceef17cc55fcf859e5664f06946c1b68efcea6acdc50f8f6a6e776"},[m
[32m+[m[32m    {file = "coverage-7.7.1-cp39-cp39-win_amd64.whl", hash = "sha256:d66ff48ab3bb6f762a153e29c0fc1eb5a62a260217bc64470d7ba602f5886d20"},[m
[32m+[m[32m    {file = "coverage-7.7.1-pp39.pp310.pp311-none-any.whl", hash = "sha256:5b7b02e50d54be6114cc4f6a3222fec83164f7c42772ba03b520138859b5fde1"},[m
[32m+[m[32m    {file = "coverage-7.7.1-py3-none-any.whl", hash = "sha256:822fa99dd1ac686061e1219b67868e25d9757989cf2259f735a4802497d6da31"},[m
[32m+[m[32m    {file = "coverage-7.7.1.tar.gz", hash = "sha256:199a1272e642266b90c9f40dec7fd3d307b51bf639fa0d15980dc0b3246c1393"},[m
 ][m
 [m
 [package.extras][m
[36m@@ -361,6 +361,21 @@[m [mfiles = [[m
 coverage = "*"[m
 setuptools = "*"[m
 [m
[32m+[m[32m[[package]][m
[32m+[m[32mname = "darca-exception"[m
[32m+[m[32mversion = "0.1.0"[m
[32m+[m[32mdescription = "Exception module for reuse along projects."[m
[32m+[m[32moptional = false[m
[32m+[m[32mpython-versions = "<4.0,>=3.12"[m
[32m+[m[32mgroups = ["main"][m
[32m+[m[32mfiles = [[m
[32m+[m[32m    {file = "darca_exception-0.1.0-py3-none-any.whl", hash = "sha256:9fb2c4fae92da5397de16ffcaf3253d95d5d7fa458ba9eb1b496e6466bafd7ae"},[m
[32m+[m[32m    {file = "darca_exception-0.1.0.tar.gz", hash = "sha256:e72905279efc07a15c2248c4dcb25ab25204520129ce400773a1c94e2d2efd8d"},[m
[32m+[m[32m][m
[32m+[m
[32m+[m[32m[package.dependencies][m
[32m+[m[32mdarca-log-facility = ">=0.1.0,<0.2.0"[m
[32m+[m
 [[package]][m
 name = "darca-log-facility"[m
 version = "0.1.0"[m
[36m@@ -1335,4 +1350,4 @@[m [mtest = ["covdefaults (>=2.3)", "coverage (>=7.2.7)", "coverage-enable-subprocess[m
 [metadata][m
 lock-version = "2.1"[m
 python-versions = "^3.12"[m
[31m-content-hash = "d7122e0bbfbb1a8a27b0df346949f96cfc0fb5118296c30883e48f83f8fb52ea"[m
[32m+[m[32mcontent-hash = "248d53733806aa8a1ab7a348e437a250a9862838b1d62ca885add360d101cf82"[m
[1mdiff --git a/pyproject.toml b/pyproject.toml[m
[1mindex 339779b..53468d2 100644[m
[1m--- a/pyproject.toml[m
[1m+++ b/pyproject.toml[m
[36m@@ -1,7 +1,7 @@[m
 [tool.poetry][m
[31m-name = "darca-exception"[m
[32m+[m[32mname = "darca-executor"[m
 version = "0.1.0"[m
[31m-description = "Exception module for reuse along projects."[m
[32m+[m[32mdescription = "Execution module for reuse along projects.."[m
 authors = ["Roel Kist <roel.kist@gmail.com>"][m
 license = "LICENSE"[m
 readme = "README.rst"[m
[36m@@ -9,6 +9,7 @@[m [mreadme = "README.rst"[m
 [tool.poetry.dependencies][m
 python = "^3.12"[m
 darca-log-facility = "^0.1.0"[m
[32m+[m[32mdarca-exception = "^0.1.0"[m
 [m
 [m
 [tool.poetry.group.dev.dependencies][m
[1mdiff --git a/src/darca_executor/__init__.py b/src/darca_executor/__init__.py[m
[1mindex e69de29..ca4937a 100644[m
[1m--- a/src/darca_executor/__init__.py[m
[1m+++ b/src/darca_executor/__init__.py[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mfrom .executor import DarcaExecError, DarcaExecutor[m
[32m+[m
[32m+[m[32m__all__ = ["DarcaExecutor", "DarcaExecError"][m
[1mdiff --git a/src/darca_executor/executor.py b/src/darca_executor/executor.py[m
[1mindex e69de29..ae114b9 100644[m
[1m--- a/src/darca_executor/executor.py[m
[1m+++ b/src/darca_executor/executor.py[m
[36m@@ -0,0 +1,158 @@[m
[32m+[m[32mimport logging[m
[32m+[m[32mimport subprocess  # nosec B404 - subprocess is explicitly controlled[m
[32m+[m[32mfrom typing import List, Optional, Union[m
[32m+[m
[32m+[m[32mfrom darca_exception import DarcaException[m
[32m+[m
[32m+[m[32mlogger = logging.getLogger(__name__)[m
[32m+[m[32mlogger.setLevel(logging.DEBUG)  # Set to INFO or WARNING in production[m
[32m+[m
[32m+[m
[32m+[m[32mclass DarcaExecError(DarcaException):[m
[32m+[m[32m    """Custom exception to wrap subprocess errors consistently."""[m
[32m+[m
[32m+[m[32m    def __init__([m
[32m+[m[32m        self,[m
[32m+[m[32m        message: str,[m
[32m+[m[32m        *,[m
[32m+[m[32m        command=None,[m
[32m+[m[32m        returncode=None,[m
[32m+[m[32m        stdout=None,[m
[32m+[m[32m        stderr=None,[m
[32m+[m[32m        cause=None[m
[32m+[m[32m    ):[m
[32m+[m[32m        metadata = {[m
[32m+[m[32m            "command": command,[m
[32m+[m[32m            "returncode": returncode,[m
[32m+[m[32m            "stdout": stdout,[m
[32m+[m[32m            "stderr": stderr,[m
[32m+[m[32m        }[m
[32m+[m[32m        super().__init__(message, metadata=metadata, cause=cause)[m
[32m+[m
[32m+[m
[32m+[m[32mclass DarcaExecutor:[m
[32m+[m[32m    """[m
[32m+[m[32m    Secure subprocess wrapper for executing shell and non-shell commands.[m
[32m+[m
[32m+[m[32m    Usage:[m
[32m+[m[32m        executor = DarcaExecutor(use_shell=False)[m
[32m+[m[32m        result = executor.run(["echo", "hello world"])[m
[32m+[m[32m    """[m
[32m+[m
[32m+[m[32m    def __init__(self, use_shell: bool = False):[m
[32m+[m[32m        """[m
[32m+[m[32m        Initialize executor.[m
[32m+[m
[32m+[m[32m        Args:[m
[32m+[m[32m            use_shell (bool): If True, executes commands through the shell.[m
[32m+[m[32m        """[m
[32m+[m[32m        self.use_shell = use_shell[m
[32m+[m
[32m+[m[32m    def run([m
[32m+[m[32m        self,[m
[32m+[m[32m        command: Union[List[str], str],[m
[32m+[m[32m        capture_output: bool = True,[m
[32m+[m[32m        check: bool = True,[m
[32m+[m[32m        cwd: Optional[str] = None,[m
[32m+[m[32m        env: Optional[dict] = None,[m
[32m+[m[32m        timeout: Optional[int] = 30,[m
[32m+[m[32m    ) -> subprocess.CompletedProcess:[m
[32m+[m[32m        """[m
[32m+[m[32m        Execute a command with subprocess.run and return the result.[m
[32m+[m
[32m+[m[32m        Args:[m
[32m+[m[32m            command (List[str] | str): Command to run. Must be a list if[m
[32m+[m[32m            use_shell=False.[m
[32m+[m[32m            capture_output (bool): If True, captures stdout/stderr.[m
[32m+[m[32m            check (bool): Raise CalledProcessError on non-zero exit.[m
[32m+[m[32m            cwd (Optional[str]): Run command from this directory.[m
[32m+[m[32m            env (Optional[dict]): Environment variables.[m
[32m+[m[32m            timeout (Optional[int]): Timeout for the command in seconds.[m
[32m+[m
[32m+[m[32m        Returns:[m
[32m+[m[32m            subprocess.CompletedProcess: Completed process result.[m
[32m+[m
[32m+[m[32m        Raises:[m
[32m+[m[32m            ValueError: If command type does not match shell usage.[m
[32m+[m[32m            DarcaExecError: On any subprocess failure with context.[m
[32m+[m[32m        """[m
[32m+[m[32m        if self.use_shell:[m
[32m+[m[32m            if not isinstance(command, str):[m
[32m+[m[32m                raise ValueError([m
[32m+[m[32m                    "When use_shell=True, command must be a string."[m
[32m+[m[32m                )[m
[32m+[m[32m        else:[m
[32m+[m[32m            if not isinstance(command, list):[m
[32m+[m[32m                raise ValueError([m
[32m+[m[32m                    "When use_shell=False, command must be a list of args."[m
[32m+[m[32m                )[m
[32m+[m
[32m+[m[32m        logger.debug("Running command: %s", command)[m
[32m+[m[32m        logger.debug("Shell mode: %s", self.use_shell)[m
[32m+[m[32m        logger.debug("Working directory: %s", cwd)[m
[32m+[m[32m        logger.debug("Capture output: %s", capture_output)[m
[32m+[m[32m        logger.debug("Environment: %s", env)[m
[32m+[m[32m        logger.debug("Timeout: %s seconds", timeout)[m
[32m+[m
[32m+[m[32m        try:[m
[32m+[m[32m            result = subprocess.run(  # nosec B603: input validated above[m
[32m+[m[32m                command,[m
[32m+[m[32m                capture_output=capture_output,[m
[32m+[m[32m                check=check,[m
[32m+[m[32m                cwd=cwd,[m
[32m+[m[32m                env=env,[m
[32m+[m[32m                timeout=timeout,[m
[32m+[m[32m                text=True,[m
[32m+[m[32m                shell=self.use_shell,[m
[32m+[m[32m            )[m
[32m+[m[32m            logger.debug([m
[32m+[m[32m                "Command completed with return code %d", result.returncode[m
[32m+[m[32m            )[m
[32m+[m[32m            if capture_output:[m
[32m+[m[32m                logger.debug("STDOUT: %s", result.stdout.strip())[m
[32m+[m[32m                logger.debug("STDERR: %s", result.stderr.strip())[m
[32m+[m[32m            return result[m
[32m+[m
[32m+[m[32m        except subprocess.CalledProcessError as e:[m
[32m+[m[32m            logger.error("Command failed with return code %d", e.returncode)[m
[32m+[m[32m            logger.error("STDOUT: %s", e.stdout)[m
[32m+[m[32m            logger.error("STDERR: %s", e.stderr)[m
[32m+[m[32m            raise DarcaExecError([m
[32m+[m[32m                "Command failed with non-zero exit code.",[m
[32m+[m[32m                command=e.cmd,[m
[32m+[m[32m                returncode=e.returncode,[m
[32m+[m[32m                stdout=e.stdout,[m
[32m+[m[32m                stderr=e.stderr,[m
[32m+[m[32m                cause=e,[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        except subprocess.TimeoutExpired as e:[m
[32m+[m[32m            logger.error("Command timed out after %s seconds", timeout)[m
[32m+[m[32m            raise DarcaExecError([m
[32m+[m[32m                "Command timed out.",[m
[32m+[m[32m                command=e.cmd,[m
[32m+[m[32m                returncode=None,[m
[32m+[m[32m                stdout=e.output,[m
[32m+[m[32m                stderr=e.stderr,[m
[32m+[m[32m                cause=e,[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        except subprocess.SubprocessError as e:[m
[32m+[m[32m            logger.exception("Unexpected subprocess error occurred.")[m
[32m+[m[32m            raise DarcaExecError([m
[32m+[m[32m                "Subprocess error occurred.",[m
[32m+[m[32m                command=command,[m
[32m+[m[32m                returncode=None,[m
[32m+[m[32m                cause=e,[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logger.exception([m
[32m+[m[32m                "Unexpected error occurred during subprocess execution."[m
[32m+[m[32m            )[m
[32m+[m[32m            raise DarcaExecError([m
[32m+[m[32m                "Unexpected error during command execution.",[m
[32m+[m[32m                command=command,[m
[32m+[m[32m                returncode=None,[m
[32m+[m[32m                cause=e,[m
[32m+[m[32m            )[m
[1mdiff --git a/tests/__init__.py b/tests/__init__.py[m
[1mindex 9ff0695..e69de29 100644[m
[1m--- a/tests/__init__.py[m
[1m+++ b/tests/__init__.py[m
[36m@@ -1,3 +0,0 @@[m
[31m-from .executor import DarcaExecutor, DarcaExecError[m
[31m-[m
[31m-__all__ = ["DarcaExecutor", "DarcaExecError"][m
\ No newline at end of file[m
[1mdiff --git a/tests/conftest.py b/tests/conftest.py[m
[1mindex e69de29..7139d0f 100644[m
[1m--- a/tests/conftest.py[m
[1m+++ b/tests/conftest.py[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32m# tests/conftest.py[m
[32m+[m
[32m+[m[32mimport os[m
[32m+[m[32mimport tempfile[m
[32m+[m
[32m+[m[32mimport pytest[m
[32m+[m
[32m+[m[32mfrom darca_executor import DarcaExecutor[m
[32m+[m
[32m+[m
[32m+[m[32m@pytest.fixture(params=[True, False], ids=["shell", "no-shell"])[m
[32m+[m[32mdef executor(request):[m
[32m+[m[32m    """[m
[32m+[m[32m    Creates a DarcaExecutor instance with both shell=True and shell=False,[m
[32m+[m[32m    to ensure coverage across both modes.[m
[32m+[m[32m    """[m
[32m+[m[32m    return DarcaExecutor(use_shell=request.param)[m
[32m+[m
[32m+[m
[32m+[m[32m@pytest.fixture[m
[32m+[m[32mdef temp_working_dir():[m
[32m+[m[32m    """[m
[32m+[m[32m    Creates a temporary working directory for tests that[m
[32m+[m[32m    interact with the filesystem.[m
[32m+[m[32m    Automatically cleans up after use.[m
[32m+[m[32m    """[m
[32m+[m[32m    with tempfile.TemporaryDirectory() as tmpdir:[m
[32m+[m[32m        orig = os.getcwd()[m
[32m+[m[32m        os.chdir(tmpdir)[m
[32m+[m[32m        try:[m
[32m+[m[32m            yield tmpdir[m
[32m+[m[32m        finally:[m
[32m+[m[32m            os.chdir(orig)[m
[32m+[m
[32m+[m
[32m+[m[32m@pytest.fixture[m
[32m+[m[32mdef safe_env(monkeypatch):[m
[32m+[m[32m    """[m
[32m+[m[32m    Provides a sanitized environment for command execution,[m
[32m+[m[32m    e.g., removing dangerous or noisy env vars for tests.[m
[32m+[m[32m    """[m
[32m+[m[32m    monkeypatch.delenv("DEBUG", raising=False)[m
[32m+[m[32m    monkeypatch.setenv("LC_ALL", "C.UTF-8")[m
[32m+[m[32m    monkeypatch.setenv("LANG", "C.UTF-8")[m
[32m+[m[32m    return dict(os.environ)[m
[1mdiff --git a/tests/test_executor.py b/tests/test_executor.py[m
[1mindex 3096e5a..17ee2a0 100644[m
[1m--- a/tests/test_executor.py[m
[1m+++ b/tests/test_executor.py[m
[36m@@ -1,8 +1,10 @@[m
 # tests/test_executor.py[m
 [m
 import os[m
[32m+[m
 import pytest[m
[31m-from darca_executor import DarcaExecutor, DarcaExecError[m
[32m+[m
[32m+[m[32mfrom darca_executor import DarcaExecError[m
 [m
 [m
 def test_successful_command(executor):[m
[36m@@ -10,7 +12,11 @@[m [mdef test_successful_command(executor):[m
     Test a basic command that should succeed.[m
     Works for both shell and non-shell modes.[m
     """[m
[31m-    command = "echo Hello, Darca!" if executor.use_shell else ["echo", "Hello, Darca!"][m
[32m+[m[32m    command = ([m
[32m+[m[32m        "echo Hello, Darca!"[m
[32m+[m[32m        if executor.use_shell[m
[32m+[m[32m        else ["echo", "Hello, Darca!"][m
[32m+[m[32m    )[m
     result = executor.run(command)[m
     assert result.returncode == 0[m
     assert "Hello, Darca!" in result.stdout[m
[36m@@ -34,8 +40,11 @@[m [mdef test_command_with_stderr_output(executor):[m
     """[m
     Test a command that writes to stderr but still exits with 0.[m
     """[m
[31m-    cmd = "python -c 'import sys; sys.stderr.write(\"warning\\n\")'" if executor.use_shell \[m
[32m+[m[32m    cmd = ([m
[32m+[m[32m        "python -c 'import sys; sys.stderr.write(\"warning\\n\")'"[m
[32m+[m[32m        if executor.use_shell[m
         else ["python", "-c", "import sys; sys.stderr.write('warning\\n')"][m
[32m+[m[32m    )[m
 [m
     result = executor.run(cmd)[m
     assert result.returncode == 0[m
[36m@@ -47,8 +56,11 @@[m [mdef test_command_in_temp_dir(executor, temp_working_dir):[m
     Test creating a file in a temporary working directory.[m
     """[m
     file_name = "test_output.txt"[m
[31m-    cmd = f"echo DarcaRocks > {file_name}" if executor.use_shell \[m
[32m+[m[32m    cmd = ([m
[32m+[m[32m        f"echo DarcaRocks > {file_name}"[m
[32m+[m[32m        if executor.use_shell[m
         else ["sh", "-c", f"echo DarcaRocks > {file_name}"][m
[32m+[m[32m    )[m
 [m
     executor.run(cmd)[m
     assert os.path.exists(file_name)[m
